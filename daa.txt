1) A)
#include <stdio.h>

int f(int n) {
    return 8 * n * n + 3 * n + 3;
}

int g(int n) {
    return n;
}

int main() {
    int c = 10;
    int n0 = -1;

    printf("n\tf(n)\tc*g(n)\n");
    for (int n = 10; n <= 30; n++) {
        int fn = f(n);
        int gn = c * g(n);
        printf("%d\t%d\t%d\n", n, fn, gn);
        if (fn >= gn && n0 == -1) {
            n0 = n;
        }
    }

    if (n0 != -1)
        printf("Minimum n0 such that f(n) >= c*g(n) for all n >= n0 is: %d\n", n0);
    else
        printf("No such n0 found in range.\n");

    return 0;
}
 -----------------------------PYTHON-------------------------------------
import matplotlib.pyplot as plt


n_values = list(range(10, 31))
f_values = [833, 922, 1013, 1106, 1201, 1298, 1397, 1498, 1601, 1706,
            1813, 1922, 2033, 2146, 2261, 2378, 2497, 2618, 2741, 2866,
            2993]  

c = 10
g_values = [c * n for n in n_values]


n0 = None
for i, (f_val, g_val) in enumerate(zip(f_values, g_values)):
    if f_val >= g_val:
        n0 = n_values[i]
        break


plt.plot(n_values, f_values, label="f(n) = 8n² + 3n + 3", marker='o')
plt.plot(n_values, g_values, label=f"c·g(n) = {c}·n", linestyle='--', marker='x')
if n0:
    plt.axvline(n0, color='gray', linestyle=':', label=f"n0 = {n0}")
plt.xlabel("n")
plt.ylabel("Value")
plt.title("Plot to Prove f(n) ∈ Ω(n)")
plt.legend()
plt.grid(True)
plt.show()

1) B)
#include <stdio.h>
#include <limits.h>

#define V 6  // Number of vertices

int graph[V][V] = {
    {0, 4, 0, 8, 0, 0},
    {4, 0, 3, 1, 0, 0},
    {0, 3, 0, 7, 0, 8},
    {8, 1, 7, 0, 3, 0},
    {0, 0, 0, 3, 0, 3},
    {0, 0, 8, 0, 3, 0}
};

int visited[V];

int findNearest(int city) {
    int min = INT_MAX;
    int nearest = -1;
    for (int i = 0; i < V; i++) {
        if (!visited[i] && graph[city][i] != 0 && graph[city][i] < min) {
            min = graph[city][i];
            nearest = i;
        }
    }
    return nearest;
}

int greedyTSP(int start) {
    int cost = 0;
    int current = start;
    visited[current] = 1;
    printf("Path: %d", current + 1);

    for (int count = 1; count < V; count++) {
        int next = findNearest(current);
        if (next == -1) break;
        visited[next] = 1;
        cost += graph[current][next];
        current = next;
        printf(" -> %d", current + 1);
    }
    printf("\n");
    return cost;
}

int main() {
    for (int i = 0; i < V; i++) visited[i] = 0;
    int start = 0; // Start at node 1
    int totalCost = greedyTSP(start);
    printf("Minimum cost (approx): %d\n", totalCost);
    return 0;


2) B) #include <stdio.h>
#include <limits.h>

#define V 5

int graph[V][V] = {
    {0, 10, 0, 0, 5},
    {10, 0, 1, 0, 6},
    {0, 1, 0, 2, 7},
    {0, 0, 2, 0, 3},
    {5, 6, 7, 3, 0}
};

int minKey(int key[], int mstSet[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++)
        if (mstSet[v] == 0 && key[v] < min)
            min = key[v], min_index = v;
    return min_index;
}

void primMST() {
    int parent[V];   // Stores MST
    int key[V];      // Weights for picking min edge
    int mstSet[V];   // Visited array

    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = 0;

    key[0] = 0;       // Start from node 0 (city 1)
    parent[0] = -1;   // First node has no parent

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = 1;

        for (int v = 0; v < V; v++)
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    int totalCost = 0;
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++) {
        printf("%d - %d \t%d \n", parent[i]+1, i+1, graph[i][parent[i]]);
        totalCost += graph[i][parent[i]];
    }
    printf("Minimum Cost = %d\n", totalCost);
}

int main() {
    primMST();
    return 0;
}

3) B)

#include <stdio.h>

#define MAX_ITEMS 4
#define MAX_WEIGHT 7

int weights[MAX_ITEMS] = {3, 5, 6, 2};
int values[MAX_ITEMS] = {10, 4, 9, 11};

int max(int a, int b) {
    return (a > b) ? a : b;
}

void knapsack() {
    int dp[MAX_ITEMS + 1][MAX_WEIGHT + 1];

    // Build table dp[][] in bottom up manner
    for (int i = 0; i <= MAX_ITEMS; i++) {
        for (int w = 0; w <= MAX_WEIGHT; w++) {
            if (i == 0 || w == 0)
                dp[i][w] = 0;
            else if (weights[i - 1] <= w)
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
            else
                dp[i][w] = dp[i - 1][w];
        }
    }

    printf("Maximum value in backpack = %d\n", dp[MAX_ITEMS][MAX_WEIGHT]);

    // Trace back to find selected items
    int w = MAX_WEIGHT;
    printf("Items selected (1-based index): ");
    for (int i = MAX_ITEMS; i > 0 && dp[i][w] > 0; i--) {
        if (dp[i][w] != dp[i - 1][w]) {
            printf("%d ", i);
            w -= weights[i - 1];
        }
    }
    printf("\n");
}

int main() {
    knapsack();
    return 0;
}

4) B)

#include <stdio.h>
#include <stdlib.h>

#define N 6

typedef struct {
    int start, finish, profit;
} Job;

Job jobs[N] = {
    {1, 2, 100},
    {2, 5, 200},
    {3, 6, 300},
    {4, 8, 400},
    {5, 9, 500},
    {6, 10, 100}
};

int max(int a, int b) {
    return (a > b) ? a : b;
}


int compare(const void *a, const void *b) {
    return ((Job *)a)->finish - ((Job *)b)->finish;
}


int latestNonConflict(Job jobs[], int i) {
    for (int j = i - 1; j >= 0; j--) {
        if (jobs[j].finish <= jobs[i].start)
            return j;
    }
    return -1;
}

void findMaxProfit() {
    qsort(jobs, N, sizeof(Job), compare);

    int dp[N];
    dp[0] = jobs[0].profit;

    for (int i = 1; i < N; i++) {
        int incl = jobs[i].profit;
        int l = latestNonConflict(jobs, i);
        if (l != -1)
            incl += dp[l];
        dp[i] = max(incl, dp[i - 1]);
    }

    printf("Maximum profit: %d\n", dp[N - 1]);
}

int main() {
    findMaxProfit();
    return 0;
}

4) C)

#include <stdio.h>
#include <stdlib.h>

#define N 6

typedef struct {
    int start, finish, value;
} Job;

Job jobs[N] = {
    {1, 2, 100},
    {2, 5, 200},
    {3, 6, 300},
    {4, 8, 400},
    {5, 9, 500},
    {6, 10, 100}
};


int compare(const void *a, const void *b) {
    return ((Job*)a)->finish - ((Job*)b)->finish;
}


int findLastNonConflict(Job jobs[], int index) {
    for (int j = index - 1; j >= 0; j--) {
        if (jobs[j].finish <= jobs[index].start)
            return j;
    }
    return -1;
}

int max(int a, int b) {
    return (a > b) ? a : b;
}

void findMaxProfit() {
    qsort(jobs, N, sizeof(Job), compare);

    int dp[N];
    dp[0] = jobs[0].value;

    for (int i =1; i < N; i++) {
        int incl = jobs[i].value;
        int l = findLastNonConflict(jobs, i);
        if (l != -1)
            incl += dp[l];

        dp[i] = max(incl, dp[i - 1]);
    }

    printf("Maximum profit = %d\n", dp[N - 1]);
}

int main() {
    findMaxProfit();
    return 0;
}

}